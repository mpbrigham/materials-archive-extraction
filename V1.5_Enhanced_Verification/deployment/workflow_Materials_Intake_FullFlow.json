{
  "name": "Materials Intake Full Flow",
  "nodes": [
    {
      "parameters": {
        "protocol": "IMAP",
        "host": "={{ $env.IMAP_HOST }}",
        "port": "={{ $env.IMAP_PORT }}",
        "secure": true,
        "mailbox": "INBOX",
        "downloadAttachments": true,
        "attachmentPrefix": "attachment_",
        "options": {
          "allowUnauthorizedCerts": false,
          "ignoreTextEncoding": false
        }
      },
      "id": "1",
      "name": "IMAP Email Trigger",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        100,
        100
      ]
    },
    {
      "parameters": {
        "options": {
          "extract": "text"
        }
      },
      "id": "2",
      "name": "Extract From PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        300,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.supervisorAgent(items, runIndex);"
      },
      "id": "3",
      "name": "Supervisor Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        500,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "httpMethod": "POST",
        "url": "={{ $env.LLM_API_ENDPOINT }}",
        "jsonParameters": true,
        "options": {
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "maxResponseSize": 10485760,
              "responseFormat": "json",
              "responseType": "json"
            }
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.LLM_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ $node[\"Extract From PDF\"].json[\"text\"] }}"
            },
            {
              "name": "model",
              "value": "={{ $env.LLM_MODEL }}"
            },
            {
              "name": "temperature",
              "value": 0.2
            },
            {
              "name": "max_tokens",
              "value": 4000
            }
          ]
        }
      },
      "id": "4",
      "name": "Call Metadata Extractor LLM API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        500,
        250
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.metadataExtractor(items, runIndex);"
      },
      "id": "5",
      "name": "Process LLM Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        700,
        250
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.checkRequiredFields(items, runIndex);"
      },
      "id": "6",
      "name": "Check Required Fields",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.verifierAgent(items, runIndex);"
      },
      "id": "7",
      "name": "Verifier Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1100,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.verification_passed }}",
              "operation": "equals",
              "value2": "true"
            }
          ]
        }
      },
      "id": "8",
      "name": "IF Verification Passed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1300,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.formatSuccessEmail(items, runIndex);"
      },
      "id": "9",
      "name": "Format Success Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        50
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get code from functions.js\nconst functions = require('./functions.js');\nreturn functions.formatErrorEmail(items, runIndex);"
      },
      "id": "10",
      "name": "Format Error Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        150
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{ $env.SMTP_USER }}",
        "toEmail": "={{ $json[\"to\"] }}",
        "subject": "={{ $json[\"subject\"] }}",
        "text": "={{ $json[\"body\"] }}",
        "options": {
          "attachments": "={{ $json[\"attachments\"] }}"
        }
      },
      "id": "11",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1700,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Log all document lifecycle stages to a file\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst logPath = process.env.LOG_PATH || './logs';\nconst logFile = path.join(logPath, 'document_lifecycle.json');\n\n// Ensure log directory exists\nif (!fs.existsSync(logPath)) {\n  fs.mkdirSync(logPath, { recursive: true });\n}\n\n// Get existing logs or create new array\nlet logs = [];\nif (fs.existsSync(logFile)) {\n  try {\n    const data = fs.readFileSync(logFile, 'utf8');\n    logs = JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading logs file:', err);\n  }\n}\n\n// Add new log entries\nif (items[0].json._lifecycle_log && Array.isArray(items[0].json._lifecycle_log)) {\n  logs = logs.concat(items[0].json._lifecycle_log);\n  \n  // Write updated logs\n  try {\n    fs.writeFileSync(logFile, JSON.stringify(logs, null, 2));\n  } catch (err) {\n    console.error('Error writing logs file:', err);\n  }\n}\n\n// Pass through the original items\nreturn items;"
      },
      "id": "12",
      "name": "Log Document Lifecycle",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        100
      ]
    },
    {
      "parameters": {
        "resource": "message",
        "channel": "={{ $env.SLACK_CHANNEL_ID }}",
        "text": "=Document processed: {{ $json.document_id }}\nStatus: {{ $json.verification_passed ? 'Success ✅' : 'Failed ❌' }}\nReason: {{ $json.reason }}"
      },
      "id": "13",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1900,
        250
      ],
      "credentials": {
        "slackApi": {
          "id": "1",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "dataPropertyName": "error",
        "errorMessage": "=Document Processor Error: {{ $json.error_message || 'Unknown error' }}"
      },
      "id": "14",
      "name": "Global Error Handler",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        100,
        250
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error_message",
              "value": "={{ $json.error }}"
            },
            {
              "name": "document_id",
              "value": "={{ $json.document_id || 'unknown-doc' }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $now.toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "15",
      "name": "Format Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        300,
        250
      ]
    }
  ],
  "connections": {
    "IMAP Email Trigger": {
      "main": [
        [
          {
            "node": "Extract From PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract From PDF": {
      "main": [
        [
          {
            "node": "Supervisor Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Call Metadata Extractor LLM API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supervisor Agent": {
      "main": [
        [
          {
            "node": "Process LLM Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Metadata Extractor LLM API": {
      "main": [
        [
          {
            "node": "Process LLM Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process LLM Response": {
      "main": [
        [
          {
            "node": "Check Required Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Required Fields": {
      "main": [
        [
          {
            "node": "Verifier Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verifier Agent": {
      "main": [
        [
          {
            "node": "IF Verification Passed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Verification Passed": {
      "main": [
        [
          {
            "node": "Format Success Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Error Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Email": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Email": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Log Document Lifecycle",
            "type": "main",
            "index": 0
          },
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global Error Handler": {
      "main": [
        [
          {
            "node": "Format Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error": {
      "main": [
        [
          {
            "node": "Format Error Email",
