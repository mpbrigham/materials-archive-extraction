{
  "name": "Materials Extraction Pipeline",
  "nodes": [
    {
      "parameters": {
        "format": "resolved",
        "downloadAttachments": true,
        "options": {}
      },
      "id": "a017ddb3-0ae7-45e5-a9d2-1e2e9369f8c4",
      "name": "Email Trigger",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [
        240,
        -160
      ],
      "credentials": {
        "imap": {
          "id": "h0Vity66wkDfDonL",
          "name": "IMAP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const fs = require('fs');\n\n// Get email data\nconst email = $input.item.json;\nconst attachments = $input.item.binary || {};\nconst filePaths = [];\n\n// Write each attachment to disk\nfor (const [key, attachment] of Object.entries(attachments)) {\n  const filePath = `/home/node/data/attachments/${$execution.id}_${attachment.fileName}`;\n  \n  // Write file to disk\n  fs.writeFileSync(filePath, attachment.data, 'base64');\n  \n  filePaths.push({\n    fileName: attachment.fileName,\n    filePath: filePath,\n    mimeType: attachment.mimeType\n  });\n}\n\n// Return single item with email context and all file paths\nreturn [{\n  json: {\n    email_context: {\n      from: email.from,\n      subject: email.subject,\n      messageId: email.messageId,\n      date: email.date\n    },\n    files: filePaths\n  }\n}];"
      },
      "id": "write-files-node",
      "name": "Write Files to Disk",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        -160
      ]
    },
    {
      "parameters": {
        "url": "http://python-api:8000/validate",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [$json] }}",
        "options": {}
      },
      "id": "1d8c1563-0ab6-4bb1-9117-49edf2789caf",
      "name": "Document Validator",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        -160
      ]
    },
    {
      "parameters": {
        "url": "http://python-api:8000/extract",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [$json] }}",
        "options": {}
      },
      "id": "6733d7f1-769e-46d5-95da-7f9330d901ed",
      "name": "LLM Extraction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        -160
      ]
    },
    {
      "parameters": {
        "url": "http://python-api:8000/process",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [$json] }}",
        "options": {}
      },
      "id": "2f9e9e79-c0d7-458a-a92b-9f5a175aba42",
      "name": "Result Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        -160
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{ $json.from }}",
        "toEmail": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "emailFormat": "html",
        "html": "={{ $json.body }}",
        "options": {}
      },
      "id": "e6709bf9-b2e5-4abb-9d04-c914dee479ec",
      "name": "Send Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1160,
        -160
      ],
      "webhookId": "1ae1ebae-1ce9-46b6-a2b7-660a90b76597",
      "credentials": {
        "smtp": {
          "id": "l29wKFfdODrn2qgi",
          "name": "SMTP account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Email Trigger": {
      "main": [
        [
          {
            "node": "Write Files to Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Files to Disk": {
      "main": [
        [
          {
            "node": "Document Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Validator": {
      "main": [
        [
          {
            "node": "LLM Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Extraction": {
      "main": [
        [
          {
            "node": "Result Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result Processor": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "materials-extraction-v2",
  "meta": {
    "instanceId": "materials-extraction-pipeline"
  },
  "id": "materials-extraction-pipeline",
  "tags": []
}
