name: Deploy Material Extraction Pipelines

on:
  push:
    branches: [v0_initial_flow]
    paths:
      - 'v0_initial_flow/**'
      - 'v0_initial_flow_ap/**'
      - '.github/workflows/deploy-materials-extraction.yml'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      n8n: ${{ steps.filter.outputs.n8n }}
      activepieces: ${{ steps.filter.outputs.activepieces }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            n8n:
              - 'v0_initial_flow/**'
            activepieces:
              - 'v0_initial_flow_ap/**'

  test-n8n:
    needs: detect-changes
    if: needs.detect-changes.outputs.n8n == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - name: Validate n8n materials schema
        run: |
          cd v0_initial_flow
          python3 -m json.tool schema/materials_schema.json > /dev/null
          echo "âœ… n8n materials schema is valid"

  test-activepieces:
    needs: detect-changes
    if: needs.detect-changes.outputs.activepieces == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - name: Validate ActivePieces materials schema
        run: |
          cd v0_initial_flow_ap
          python3 -m json.tool schema/materials_schema.json > /dev/null
          echo "âœ… ActivePieces materials schema is valid"
      
      - name: Validate ActivePieces workflow
        run: |
          cd v0_initial_flow_ap
          python3 -m json.tool activepieces.json > /dev/null
          echo "âœ… ActivePieces workflow is valid JSON"

  deploy-n8n:
    needs: [detect-changes, test-n8n]
    if: needs.detect-changes.outputs.n8n == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy n8n to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "ðŸš€ Starting n8n deployment..."
            cd /opt/materials-archive-extraction/v0_initial_flow
            git checkout v0_initial_flow
            git pull origin v0_initial_flow
            
            # Ensure git processes symlinks correctly
            git config core.symlinks true
            git checkout HEAD -- prompts/llm_extraction.txt schema/materials_schema.json
            
            # Ensure data directory exists with correct permissions for n8n
            mkdir -p data
            chown -R 1000:1000 data/ 2>/dev/null || echo "Cannot change ownership, continuing..."
            
            # Deploy with environment variables
            EMAIL_USER="${{ secrets.EMAIL_USER }}" \
            EMAIL_PASS="${{ secrets.EMAIL_PASS }}" \
            LLM_API_KEY="${{ secrets.LLM_API_KEY }}" \
            N8N_ENCRYPTION_KEY="${{ secrets.N8N_ENCRYPTION_KEY }}" \
            docker compose up -d --build
            
            # Wait for n8n to be ready
            echo "Waiting for n8n to start..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:5678/healthz > /dev/null 2>&1; then
                echo "n8n is ready!"
                break
              fi
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "n8n failed to start within 5 minutes"
              exit 1
            fi
            
            # Import credentials and workflow using export/import pattern
            echo "Importing credentials..."
            docker exec v0_initial_flow-n8n-1 n8n import:credentials --input=/home/node/import/credentials.json
            
            echo "Importing workflow..."
            docker exec v0_initial_flow-n8n-1 n8n import:workflow --input=/home/node/import/workflows.json
            
            echo "Activating workflow..."
            docker exec v0_initial_flow-n8n-1 n8n update:workflow --id=SjsG0ctMg0DMZCMn --active=true
            
            echo "âœ… n8n deployment completed successfully!"

  deploy-activepieces:
    needs: [detect-changes, test-activepieces]
    if: needs.detect-changes.outputs.activepieces == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy ActivePieces to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "ðŸš€ Starting ActivePieces deployment..."
            cd /opt/materials-archive-extraction/v0_initial_flow_ap
            git checkout v0_initial_flow
            git pull origin v0_initial_flow
            
            # Ensure git processes symlinks correctly
            git config core.symlinks true
            git checkout HEAD -- prompts/llm_extraction.txt schema/materials_schema.json
            
            # Ensure data directory exists
            mkdir -p data
            chmod 755 data
            
            # Create .env file with secrets
            cat > .env << 'EOF'
            # Email Configuration
            IMAP_HOST=${{ secrets.IMAP_HOST }}
            IMAP_PORT=${{ secrets.IMAP_PORT }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            
            # LLM Configuration
            LLM_API_KEY=${{ secrets.LLM_API_KEY }}
            LLM_MODEL=${{ secrets.LLM_MODEL }}
            EOF
            
            # Deploy with docker compose
            docker compose down
            docker compose up -d --build
            
            # Wait for ActivePieces to be ready
            echo "Waiting for ActivePieces to start..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:5679/api/v1/health > /dev/null 2>&1; then
                echo "ActivePieces is ready!"
                break
              fi
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "ActivePieces failed to start within 5 minutes"
              docker compose logs
              exit 1
            fi
            
            # Check container status
            docker compose ps
            
            echo "âœ… ActivePieces deployment completed successfully!"

  notify-completion:
    needs: [deploy-n8n, deploy-activepieces]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary"
          echo "- n8n deployment: ${{ needs.deploy-n8n.result }}"
          echo "- ActivePieces deployment: ${{ needs.deploy-activepieces.result }}"
