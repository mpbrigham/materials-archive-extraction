name: Deploy Material Extraction Pipelines

on:
  push:
    branches: [v0_initial_flow]
    paths:
      - 'v0_initial_flow_n8n/**'
      - 'v0_initial_flow_ap/**'
      - '.github/workflows/deploy-workflows.yml'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      n8n: ${{ steps.filter.outputs.n8n }}
      activepieces: ${{ steps.filter.outputs.activepieces }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            n8n:
              - 'v0_initial_flow_n8n/**'
            activepieces:
              - 'v0_initial_flow_ap/**'

  test-n8n:
    needs: detect-changes
    if: needs.detect-changes.outputs.n8n == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - name: Validate n8n materials schema
        run: |
          cd v0_initial_flow_n8n
          python3 -m json.tool schema/materials_schema.json > /dev/null
          echo "✅ n8n materials schema is valid"

  test-activepieces:
    needs: detect-changes
    if: needs.detect-changes.outputs.activepieces == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Fix symlinks
        run: |
          git config core.symlinks true
          git reset --hard HEAD
      
      - name: Validate ActivePieces materials schema
        run: |
          cd v0_initial_flow_ap
          python3 -m json.tool schema/materials_schema.json > /dev/null
          echo "✅ ActivePieces materials schema is valid"
      
      - name: Validate ActivePieces workflow
        run: |
          cd v0_initial_flow_ap
          python3 -m json.tool ap.json > /dev/null
          echo "✅ ActivePieces workflow is valid JSON"

  deploy-n8n:
    needs: [detect-changes, test-n8n]
    if: needs.detect-changes.outputs.n8n == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy n8n to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "🚀 Starting n8n deployment..."
            cd /opt/materials-archive-extraction/v0_initial_flow_n8n
            git checkout v0_initial_flow
            git pull origin v0_initial_flow
            
            # Ensure git processes symlinks correctly
            git config core.symlinks true
            git checkout HEAD -- prompts/llm_extraction.txt schema/materials_schema.json
            
            # Ensure data directory exists with correct permissions for n8n
            mkdir -p data
            chown -R 1000:1000 data/ 2>/dev/null || echo "Cannot change ownership, continuing..."
            
            # Extract non-sensitive values from .env file
            if [ -f .env ]; then
              echo "Loading configuration from .env file..."
              # Export only non-sensitive configuration values
              set -a  # automatically export all variables
              source <(grep -E '^(IMAP_HOST|IMAP_PORT|SMTP_HOST|SMTP_PORT|EMAIL_USER|LLM_MODEL)=' .env | sed "s/'//g")
              set +a
              
              # Validate required variables
              REQUIRED_VARS="IMAP_HOST IMAP_PORT SMTP_HOST SMTP_PORT EMAIL_USER LLM_MODEL"
              for var in $REQUIRED_VARS; do
                if [ -z "${!var}" ]; then
                  echo "ERROR: Required variable $var is not set in .env file"
                  exit 1
                fi
              done
              echo "All required configuration variables are set"
            else
              echo "ERROR: .env file not found - cannot proceed without configuration"
              echo "Please create .env file from .env.template and configure all required values"
              exit 1
            fi
            
            # Stop any existing containers
            docker compose down --remove-orphans
            
            # Deploy with environment variables (config from .env + secrets from GitHub)
            IMAP_HOST="${IMAP_HOST}" \
            IMAP_PORT="${IMAP_PORT}" \
            SMTP_HOST="${SMTP_HOST}" \
            SMTP_PORT="${SMTP_PORT}" \
            EMAIL_USER="${EMAIL_USER}" \
            LLM_MODEL="${LLM_MODEL}" \
            EMAIL_PASS="${{ secrets.EMAIL_PASS }}" \
            LLM_API_KEY="${{ secrets.LLM_API_KEY }}" \
            N8N_ENCRYPTION_KEY="${{ secrets.N8N_ENCRYPTION_KEY }}" \
            docker compose up -d --build
            
            # Wait for n8n to be ready (using correct health endpoint)
            echo "Waiting for n8n to start..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if curl -s http://localhost:5678/health > /dev/null 2>&1; then
                echo "n8n is ready!"
                break
              fi
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "n8n failed to start within 5 minutes"
              exit 1
            fi
            
            # Import credentials and workflow
            echo "Importing n8n credentials..."
            
            # Generate temporary credentials file
            cat > /dev/shm/n8n-credentials-$$.json << 'EOF'
            [
              {
                "id": "gemini-ai",
                "name": "Gemini AI",
                "type": "googleAi",
                "data": {
                  "apiKey": "$LLM_API_KEY"
                }
              },
              {
                "id": "email-imap",
                "name": "Email IMAP",
                "type": "imap",
                "data": {
                  "host": "$IMAP_HOST",
                  "port": $IMAP_PORT,
                  "user": "$EMAIL_USER",
                  "password": "$EMAIL_PASS",
                  "secure": true
                }
              },
              {
                "id": "email-smtp",
                "name": "Email SMTP",
                "type": "smtp",
                "data": {
                  "host": "$SMTP_HOST",
                  "port": $SMTP_PORT,
                  "user": "$EMAIL_USER",
                  "password": "$EMAIL_PASS",
                  "secure": true,
                  "authentication": true
                }
              }
            ]
            EOF
            
            # Substitute environment variables
            export LLM_API_KEY="${{ secrets.LLM_API_KEY }}"
            export EMAIL_PASS="${{ secrets.EMAIL_PASS }}"
            envsubst < /dev/shm/n8n-credentials-$$.json > /dev/shm/n8n-credentials-final-$$.json
            
            # Copy credentials file into container
            docker cp /dev/shm/n8n-credentials-final-$$.json materials-n8n:/tmp/credentials.json
            
            # Import credentials
            docker compose exec -T n8n n8n import:credentials --input=/tmp/credentials.json
            
            # Import workflow
            docker compose exec -T n8n n8n import:workflow --input=/home/node/data/n8n.json
            
            # Clean up sensitive files
            docker compose exec -T n8n rm -f /tmp/credentials.json
            rm -f /dev/shm/n8n-credentials-$$.json /dev/shm/n8n-credentials-final-$$.json
            
            echo "✅ n8n deployment completed successfully!"

  deploy-activepieces:
    needs: [detect-changes, test-activepieces]
    if: needs.detect-changes.outputs.activepieces == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy ActivePieces to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            echo "🚀 Starting ActivePieces deployment..."
            cd /opt/materials-archive-extraction/v0_initial_flow_ap
            git checkout v0_initial_flow
            git pull origin v0_initial_flow
            
            # Ensure git processes symlinks correctly
            git config core.symlinks true
            git checkout HEAD -- prompts/llm_extraction.txt schema/materials_schema.json
            
            # Ensure data directory exists
            mkdir -p data
            chmod 755 data
            
            # Extract non-sensitive values from .env file
            if [ -f .env ]; then
              echo "Loading configuration from .env file..."
              # Export only non-sensitive configuration values
              set -a  # automatically export all variables
              source <(grep -E '^(IMAP_HOST|IMAP_PORT|SMTP_HOST|SMTP_PORT|EMAIL_USER|LLM_MODEL)=' .env | sed "s/'//g")
              set +a
              
              # Validate required variables
              REQUIRED_VARS="IMAP_HOST IMAP_PORT SMTP_HOST SMTP_PORT EMAIL_USER LLM_MODEL"
              for var in $REQUIRED_VARS; do
                if [ -z "${!var}" ]; then
                  echo "ERROR: Required variable $var is not set in .env file"
                  exit 1
                fi
              done
              echo "All required configuration variables are set"
            else
              echo "ERROR: .env file not found - cannot proceed without configuration"
              echo "Please create .env file from .env.template and configure all required values"
              exit 1
            fi
            
            # Generate API key if not already in .env
            if ! grep -q "^AP_API_KEY=" .env 2>/dev/null; then
              echo "Generating new AP_API_KEY..."
              AP_API_KEY="ap_$(openssl rand -hex 16)"
              echo "AP_API_KEY=${AP_API_KEY}" >> .env
              echo "AP_API_KEY generated and saved to .env"
            else
              echo "Using existing AP_API_KEY from .env"
              AP_API_KEY=$(grep "^AP_API_KEY=" .env | cut -d'=' -f2)
            fi
            
            # Deploy with docker compose
            docker compose down --remove-orphans
            
            # Deploy with environment variables (config from .env + secrets from GitHub)
            IMAP_HOST="${IMAP_HOST}" \
            IMAP_PORT="${IMAP_PORT}" \
            SMTP_HOST="${SMTP_HOST}" \
            SMTP_PORT="${SMTP_PORT}" \
            EMAIL_USER="${EMAIL_USER}" \
            LLM_MODEL="${LLM_MODEL}" \
            EMAIL_PASS="${{ secrets.EMAIL_PASS }}" \
            LLM_API_KEY="${{ secrets.LLM_API_KEY }}" \
            AP_ENCRYPTION_KEY="${{ secrets.AP_ENCRYPTION_KEY }}" \
            AP_JWT_SECRET="${{ secrets.AP_JWT_SECRET }}" \
            AP_API_KEY="${AP_API_KEY}" \
            docker compose up -d --build
            
            # Wait for ActivePieces to be ready
            echo "Waiting for ActivePieces to start..."
            timeout=300
            while [ $timeout -gt 0 ]; do
              if docker compose exec -T ap curl -s http://localhost:80/api/v1/health > /dev/null 2>&1; then
                echo "ActivePieces is ready!"
                break
              fi
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "ActivePieces failed to start within 5 minutes"
              docker compose logs
              exit 1
            fi
            
            # Setup workflow only (CE edition - no credentials via API)
            echo "Setting up ActivePieces workflow (CE edition)..."
            sleep 10
            
            docker compose exec -T ap pip install requests
            docker compose exec -T \
              -e AP_URL=http://localhost:80 \
              -e AP_API_KEY="${AP_API_KEY}" \
              -e AP_CE_MODE=true \
              ap python3 /data/scripts/setup-ap.py
            
            if [ $? -eq 0 ]; then
              echo "✅ ActivePieces workflow import completed successfully!"
              echo "Note: Connections must be configured manually in the ActivePieces UI (CE edition)"
            else
              echo "❌ ActivePieces workflow import failed"
              exit 1
            fi
            
            # Check container status
            docker compose ps
            
            echo "✅ ActivePieces deployment completed successfully!"

  notify-completion:
    needs: [deploy-n8n, deploy-activepieces]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary"
          echo "- n8n deployment: ${{ needs.deploy-n8n.result }}"
          echo "- ActivePieces deployment: ${{ needs.deploy-activepieces.result }}"
