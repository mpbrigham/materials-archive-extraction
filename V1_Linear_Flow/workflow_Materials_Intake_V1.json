{
  "name": "Materials Intake Pipeline V1 Multimodal",
  "nodes": [
    {
      "parameters": {
        "protocol": "IMAP",
        "host": "={{ $env.IMAP_HOST }}",
        "port": "={{ $env.IMAP_PORT }}",
        "user": "={{ $env.EMAIL_USER }}",
        "password": "={{ $env.EMAIL_PASS }}",
        "secure": true,
        "mailbox": "INBOX",
        "downloadAttachments": true,
        "attachmentPrefix": "attachment_",
        "options": {
          "allowUnauthorizedCerts": false,
          "ignoreTextEncoding": false
        }
      },
      "id": "1",
      "name": "Email Trigger",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [
        100,
        100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Document Validator Function for Materials Library Extraction\n// Used by the Document Validator node in n8n workflow\n\n// Wrap everything in try/catch to prevent undefined errors\ntry {\n  if (!items || items.length === 0) {\n    const fallback_document_id = `doc-${Date.now()}-fallback`;\n    return [\n      {\n        json: {\n          task_status: \"failed\",\n          error_summary: \"No items received by Document Validator\",\n          document_id: fallback_document_id,\n          from_state: \"RECEIVED\",\n          to_state: \"FAILED\",\n          timestamp: new Date().toISOString(),\n          agent: \"document_validator_v1\",\n          notes: \"No input data received\"\n        }\n      }\n    ];\n  }\n\n  const item = items[0];\n\n  // Check if this is a retry attempt\n  if (item.json && item.json.retry_extraction) {\n    const documentId = item.json.document_id || `doc-${Date.now()}-retry`;\n    const originalRequest = item.json.original_request || {};\n    const errorSummary = item.json.error_summary || \"Unknown error\";\n    const retryCount = item.json.retry_count || 1;\n\n    const retryLogEntry = {\n      document_id: documentId,\n      from_state: \"VALIDATION_FAILED\",\n      to_state: \"RETRY_EXTRACTION\",\n      timestamp: new Date().toISOString(),\n      agent: \"document_validator_v1\",\n      notes: `Retry attempt ${retryCount}: ${errorSummary}`\n    };\n\n    return [\n      {\n        json: {\n          ...originalRequest,\n          retry_count: retryCount,\n          error_summary: errorSummary,\n          document_id: documentId,\n          task: \"retry_extraction\",\n          _lifecycle_log: [...(item.json._lifecycle_log || []), retryLogEntry]\n        }\n      }\n    ];\n  }\n\n  // First-time processing\n  if (!item.binary || !item.binary.attachment_1 || item.binary.attachment_1.mimeType !== 'application/pdf') {\n    const fallback_document_id = `doc-${Date.now()}-missing-pdf`;\n    return [\n      {\n        json: {\n          task_status: \"failed\",\n          error_summary: \"Invalid or missing PDF attachment\",\n          document_id: fallback_document_id,\n          from_state: \"RECEIVED\",\n          to_state: \"FAILED\",\n          timestamp: new Date().toISOString(),\n          agent: \"document_validator_v1\",\n          notes: \"Missing PDF or invalid format\"\n        }\n      }\n    ];\n  }\n\n  const sender = item.json?.from || \"unknown_sender\";\n  const subject = item.json?.subject || \"No Subject\";\n  const timestamp = new Date().toISOString();\n  const document_id = `doc-${Date.now()}-${sender.replace(/[^a-zA-Z0-9]/g, '')}`;\n\n  const logEntry = {\n    document_id,\n    from_state: \"RECEIVED\",\n    to_state: \"INTERPRETED\",\n    timestamp,\n    agent: \"document_validator_v1\",\n    notes: `Document validated successfully`\n  };\n\n  const file_path = item.binary?.attachment_1?.path || `attachments/${document_id}.pdf`;\n\n  return [\n    {\n      json: {\n        file_path,\n        sender,\n        timestamp,\n        subject,\n        document_id,\n        task: \"extract_metadata\",\n        document_type: \"supplier_material\",\n        retry_count: 0,\n        _lifecycle_log: [logEntry],\n        multimodal_processing: true\n      }\n    }\n  ];\n} catch (error) {\n  const fallback_document_id = `doc-${Date.now()}-error`;\n  return [\n    {\n      json: {\n        task_status: \"failed\",\n        error_summary: `Document validator error: ${error.message}`,\n        document_id: fallback_document_id,\n        from_state: \"RECEIVED\",\n        to_state: \"FAILED\",\n        timestamp: new Date().toISOString(),\n        agent: \"document_validator_v1\",\n        notes: `Unexpected error: ${error.stack || error.message}`\n      }\n    }\n  ];\n}"
      },
      "id": "3",
      "name": "Document Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        300,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "httpMethod": "POST",
        "url": "={{ $env.LLM_API_ENDPOINT }}",
        "jsonParameters": true,
        "options": {
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "maxResponseSize": 10485760,
              "responseFormat": "json",
              "responseType": "json"
            }
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.LLM_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ (() => { const fs = require('fs'); const promptContent = fs.readFileSync('/home/node/prompts/llm_extraction.txt', 'utf8'); const filePath = $node[\"Document Validator\"].json[\"file_path\"]; return `${promptContent}\\n\\nNow analyze the document at: ${filePath}`; })() }}"
            },
            {
              "name": "temperature",
              "value": 0.2
            },
            {
              "name": "max_tokens",
              "value": 8000
            },
            {
              "name": "include_pdf",
              "value": true
            }
          ]
        },
        "postReceive": {
          "enabled": true,
          "type": "jsonTranform",
          "jsonTranform": {
            "transformationInstructions": "// Transform extraction response to array format according to AGENT_INTERFACE_CONTRACTS\nconst filePath = $node[\"Document Validator\"].json.file_path || \"\";\nconst isRetry = $node[\"Document Validator\"].json.task === \"retry_extraction\";\nconst retryCount = $node[\"Document Validator\"].json.retry_count || 0;\nconst documentId = $node[\"Document Validator\"].json.document_id;\n\n// Parse the LLM extraction result\ntry {\n  const extractedData = $input.all()[0].body;\n  \n  // Handle response based on whether it's an array or single object\n  let products = [];\n  if (Array.isArray(extractedData)) {\n    // Multiple products returned\n    products = extractedData;\n  } else {\n    // Single product returned, wrap in array\n    products = [extractedData];\n  }\n  \n  // Transform products to match interface contract\n  const transformedProducts = products.map(product => ({\n    field_extractions: product\n  }));\n  \n  // Extract language from the first product if available\n  let language_detected = \"unknown\";\n  if (products.length > 0 && products[0].language_detected && products[0].language_detected.value) {\n    language_detected = products[0].language_detected.value;\n  }\n  \n  // Prepare response according to AGENT_INTERFACE_CONTRACTS\n  const result = {\n    products: transformedProducts,\n    language_detected: language_detected,\n    _metadata: {\n      prompt_id: isRetry ? \"multimodal-v1.5-retry\" : \"multimodal-v1.5\",\n      model_version: \"gemini-2.0-flash\",\n      generated_ts: new Date().toISOString(),\n      is_retry: isRetry,\n      retry_count: retryCount,\n      multimodal_extraction: true,\n      source_file_name: filePath.split('/').pop() || \"unknown\",\n      product_count: transformedProducts.length\n    },\n    _lifecycle_log: $node[\"Document Validator\"].json._lifecycle_log || [],\n    document_id: documentId,\n    retry_count: retryCount,\n    original_request: isRetry ? $node[\"Document Validator\"].json.original_request : $node[\"Document Validator\"].json\n  };\n  \n  // Add lifecycle log entry\n  result._lifecycle_log.push({\n    document_id: documentId,\n    from_state: isRetry ? \"RETRY_EXTRACTION\" : \"INTERPRETED\",\n    to_state: \"EXTRACTED\",\n    timestamp: new Date().toISOString(),\n    agent: \"multimodal_metadata_extractor_v1\",\n    notes: isRetry ? \n      `Retry extraction attempt ${retryCount} completed - ${transformedProducts.length} product(s) extracted, language=${language_detected}` : \n      `Multimodal extraction completed - ${transformedProducts.length} product(s) extracted, language=${language_detected}`\n  });\n  \n  return { json: result };\n} catch (error) {\n  // Error handling\n  const errorEntry = {\n    document_id: documentId,\n    from_state: isRetry ? \"RETRY_EXTRACTION\" : \"INTERPRETED\",\n    to_state: \"FAILED\",\n    timestamp: new Date().toISOString(),\n    agent: \"multimodal_metadata_extractor_v1\",\n    notes: `Multimodal extraction failed: ${error.message}`\n  };\n  \n  return {\n    json: {\n      task_status: \"failed\",\n      error_summary: `Multimodal metadata extraction failed: ${error.message}`,\n      document_id: documentId,\n      retry_count: retryCount,\n      _lifecycle_log: [...($node[\"Document Validator\"].json._lifecycle_log || []), errorEntry]\n    }\n  };\n}"
          }
        }
      },
      "id": "4",
      "name": "LLM Extraction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        500,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "httpMethod": "POST",
        "url": "={{ $env.LLM_API_ENDPOINT }}",
        "jsonParameters": true,
        "options": {
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "maxResponseSize": 10485760,
              "responseFormat": "json",
              "responseType": "json"
            }
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.LLM_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ (() => { const fs = require('fs'); const promptContent = fs.readFileSync('/home/node/prompts/llm_data_processor.txt', 'utf8'); const products = JSON.stringify($json.products); const metadata = JSON.stringify($json._metadata); return `${promptContent}\\n\\nExtracted products: ${products}\\n\\nMetadata: ${metadata}\\n\\nMake a decision about how to proceed with each product.`; })() }}"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 6000
            }
          ]
        },
        "postReceive": {
          "enabled": true,
          "type": "jsonTranform",
          "jsonTranform": {
            "transformationInstructions": "// Transform data processor response\ntry {\n  const response = $input.all()[0].body;\n  const documentId = $json.document_id;\n  \n  // Extract success and failed products from response\n  const successProducts = response.products || [];\n  const failedProducts = response.failed_products || [];\n  const status = response.status || 'success';\n  const reason = response.reason || '';\n  \n  // Get language from previous step\n  const language_detected = $json.language_detected || \"unknown\";\n  \n  // Create lifecycle log entry\n  const logEntry = {\n    document_id: documentId,\n    from_state: \"EXTRACTED\",\n    to_state: status === 'failure' ? \"FAILED\" : \"PROCESSED\",\n    timestamp: new Date().toISOString(),\n    agent: \"llm_data_processor_v1\",\n    notes: `${successProducts.length} products processed successfully, ${failedProducts.length} failed. ${reason}`\n  };\n  \n  const result = {\n    // Pass through successful products\n    products: successProducts,\n    failed_products: failedProducts,\n    status: status,\n    reason: reason,\n    product_count: successProducts.length,\n    partial_success: status === 'partial_success',\n    document_id: documentId,\n    language_detected: language_detected,\n    original_request: $json.original_request,\n    _lifecycle_log: [...($json._lifecycle_log || []), logEntry]\n  };\n  \n  return { json: result };\n} catch (error) {\n  return {\n    json: {\n      task_status: \"failed\",\n      error_summary: `Data processing failed: ${error.message}`,\n      document_id: $json.document_id,\n      _lifecycle_log: $json._lifecycle_log || []\n    }\n  };\n}"
          }
        }
      },
      "id": "6",
      "name": "LLM Data Processor",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        900,
        100
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "httpMethod": "POST",
        "url": "={{ $env.LLM_API_ENDPOINT }}",
        "jsonParameters": true,
        "options": {
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "maxResponseSize": 10485760,
              "responseFormat": "json",
              "responseType": "json"
            }
          }
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $env.LLM_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ (() => { const fs = require('fs'); const promptContent = fs.readFileSync('/home/node/prompts/llm_verifier.txt', 'utf8'); const products = JSON.stringify($json.products); const filePath = $node[\"Document Validator\"].json[\"file_path\"]; return `${promptContent}\\n\\nDocument path: ${filePath}\\n\\nProducts to verify: ${products}`; })() }}"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 8000
            },
            {
              "name": "include_pdf",
              "value": true
            }
          ]
        },
        "postReceive": {
          "enabled": true,
          "type": "jsonTranform",
          "jsonTranform": {
            "transformationInstructions": "// Transform verifier response according to interface contracts\ntry {\n  const response = $input.all()[0].body;\n  const documentId = $json.document_id;\n  \n  // Extract verification results\n  const verificationPassed = response.overall_verification?.passed || response.verification_passed || false;\n  const verifiedProducts = response.products || [];\n  const partialSuccess = response.overall_verification?.passed_count > 0 && \n                        response.overall_verification?.passed_count < response.overall_verification?.product_count;\n  \n  // Get language from previous steps\n  const language_detected = $json.language_detected || \"unknown\";\n  \n  // Transform verified products to include extracted_values\n  const transformedProducts = verifiedProducts.map(product => {\n    // Extract values from field_extractions for final format\n    const extractedValues = {};\n    if (product.field_extractions) {\n      for (const [field, data] of Object.entries(product.field_extractions)) {\n        extractedValues[field] = data.value;\n      }\n    }\n    \n    return {\n      ...product,\n      extracted_values: extractedValues\n    };\n  });\n  \n  // Separate verified and failed products\n  const successProducts = transformedProducts.filter(p => p.verification_passed);\n  const failedProducts = transformedProducts.filter(p => !p.verification_passed);\n  \n  // Create lifecycle log entry\n  const logEntry = {\n    document_id: documentId,\n    from_state: \"PROCESSED\",\n    to_state: verificationPassed ? \"VERIFIED\" : \"FAILED\",\n    timestamp: new Date().toISOString(),\n    agent: \"multimodal_verifier_v1\",\n    notes: `${successProducts.length} products verified, ${failedProducts.length} failed verification`\n  };\n  \n  const result = {\n    verification_passed: verificationPassed,\n    reason: response.overall_verification?.notes || response.reason || '',\n    products: successProducts,\n    failed_products: failedProducts,\n    verifier_version: \"multimodal-v1.5\",\n    language_detected: language_detected,\n    partial_success: partialSuccess,\n    document_id: documentId,\n    original_request: $json.original_request,\n    _lifecycle_log: [...($json._lifecycle_log || []), logEntry]\n  };\n  \n  return { json: result };\n} catch (error) {\n  return {\n    json: {\n      verification_passed: false,\n      reason: `Verification failed: ${error.message}`,\n      products: [],\n      failed_products: $json.products || [],\n      document_id: $json.document_id,\n      _lifecycle_log: $json._lifecycle_log || []\n    }\n  };\n}"
          }
        }
      },
      "id": "7",
      "name": "LLM Verifier",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1100,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.verification_passed }}",
              "operation": "equals",
              "value2": "true"
            }
          ]
        }
      },
      "id": "8",
      "name": "Validation Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1300,
        100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Success Notifier Function for Materials Library Extraction\n// Used by the Success Notifier node in n8n workflow\n\n// Template loader function for email templates\nconst loadEmailTemplate = function(templateName, variables) {\n  const fs = require('fs');\n  const templatePath = `/home/node/email_templates/${templateName}.txt`;\n  \n  try {\n    let template = fs.readFileSync(templatePath, 'utf8');\n    \n    // Replace placeholders with actual values\n    for (const [key, value] of Object.entries(variables)) {\n      const placeholder = new RegExp(`{{${key}}}`, 'g');\n      template = template.replace(placeholder, value || '');\n    }\n    \n    return template;\n  } catch (error) {\n    console.error(`Error loading email template ${templateName}:`, error);\n    // Fallback to hardcoded template if file not found\n    return `Subject: Email Template Error\\n\\nError loading email template: ${error.message}`;\n  }\n};\n\n// Format Success Email Function\ntry {\n  if (!items || items.length === 0) {\n    throw new Error(\"No items received by Email Formatter\");\n  }\n  \n  const item = items[0];\n  \n  // Extract original request data\n  const originalRequest = item.json.original_request || {};\n  const sender = originalRequest.sender || \"materials-team@example.com\";\n  \n  // Get product count and language\n  const productCount = item.json.products ? item.json.products.length : 0;\n  const language = item.json.language_detected || \"undetected\";\n  const partialSuccess = item.json.partial_success || false;\n  \n  // Format JSON for attachment - use extracted_values\n  const cleanedProducts = item.json.products.map(product => product.extracted_values);\n  const jsonStr = JSON.stringify(cleanedProducts, null, 2);\n  \n  // Build the product list for display\n  let productList = '';\n  if (productCount === 1) {\n    const product = item.json.products[0].extracted_values;\n    productList = `Material: ${product.name || 'Unnamed Material'}\\n`;\n    productList += `Brand: ${product.brand || 'Unspecified Brand'}\\n`;\n  } else {\n    productList = 'Products:\\n';\n    const maxToList = Math.min(productCount, 5);\n    for (let i = 0; i < maxToList; i++) {\n      const product = item.json.products[i].extracted_values;\n      productList += `${i+1}. ${product.name || 'Unnamed Material'} (${product.brand || 'Unspecified Brand'})\\n`;\n    }\n    \n    if (productCount > maxToList) {\n      productList += `... and ${productCount - maxToList} more\\n`;\n    }\n  }\n  \n  // Build the notes section\n  let notes = '';\n  const fallbackNote = item.json.products.some(p => p.fallback_applied) ? \n    'Note: Simplified metadata extracted for some products due to confidence thresholds.' : \n    '';\n  \n  if (fallbackNote) {\n    notes += `\\n${fallbackNote}\\n`;\n  }\n  \n  if (partialSuccess) {\n    notes += `\\nNote: Some products could not be fully verified and were excluded from the results.\\n`;\n  }\n  \n  // Build the product description\n  let productDescription = '';\n  if (productCount === 1) {\n    productDescription = 'The extracted metadata is included below in JSON format.';\n  } else {\n    productDescription = `${productCount} products were extracted and their metadata is included below in JSON format.`;\n  }\n  \n  // Load and populate the template\n  const templateVars = {\n    sender: sender,\n    productCountSuffix: productCount > 1 ? ` (${productCount} products)` : '',\n    productDescription: productDescription,\n    productList: productList,\n    notes: notes,\n    language: language\n  };\n  \n  const emailContent = loadEmailTemplate('success', templateVars);\n  \n  // Extract subject and body from template\n  const lines = emailContent.split('\\n');\n  const subject = lines[0].replace('Subject: ', '');\n  const body = lines.slice(2).join('\\n');\n  \n  return [\n    {\n      json: {\n        to: sender,\n        subject: subject,\n        body: body,\n        attachments: [\n          {\n            data: Buffer.from(jsonStr).toString('base64'),\n            name: 'extracted_metadata.json',\n            type: 'application/json'\n          }\n        ],\n        document_id: item.json.document_id,\n        _lifecycle_log: item.json._lifecycle_log || []\n      }\n    }\n  ];\n} catch (error) {\n  // Error handling\n  return [\n    {\n      json: {\n        to: \"materials-team@example.com\",\n        subject: \"Error Formatting Success Email\",\n        body: `There was an error formatting the success email: ${error.message}`,\n        document_id: items[0]?.json?.document_id || \"unknown\",\n        _lifecycle_log: items[0]?.json?._lifecycle_log || []\n      }\n    }\n  ];\n}"
      },
      "id": "9",
      "name": "Success Notifier",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        50
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Error Notifier Function for Materials Library Extraction\n// Used by the Error Notifier node in n8n workflow\n\n// Template loader function for email templates\nconst loadEmailTemplate = function(templateName, variables) {\n  const fs = require('fs');\n  const templatePath = `/home/node/email_templates/${templateName}.txt`;\n  \n  try {\n    let template = fs.readFileSync(templatePath, 'utf8');\n    \n    // Replace placeholders with actual values\n    for (const [key, value] of Object.entries(variables)) {\n      const placeholder = new RegExp(`{{${key}}}`, 'g');\n      template = template.replace(placeholder, value || '');\n    }\n    \n    return template;\n  } catch (error) {\n    console.error(`Error loading email template ${templateName}:`, error);\n    // Fallback to hardcoded template if file not found\n    return `Subject: Email Template Error\\n\\nError loading email template: ${error.message}`;\n  }\n};\n\n// Format Error Email Function\ntry {\n  if (!items || items.length === 0) {\n    throw new Error(\"No items received by Error Email Formatter\");\n  }\n  \n  const item = items[0];\n  \n  // Extract original request data\n  const originalRequest = item.json.original_request || {};\n  const sender = originalRequest.sender || \"materials-team@example.com\";\n  \n  // Get error reason - this could come from different paths\n  const errorReason = item.json.error_summary || item.json.reason || \"Unknown error occurred\";\n  \n  // Check for failed products from different stages\n  const failedProducts = item.json.failed_products || [];\n  const failedCount = Array.isArray(failedProducts) ? failedProducts.length : 0;\n  \n  // Check for partial success scenarios\n  const partialSuccess = item.json.partial_success || false;\n  const products = item.json.products || [];\n  const successCount = Array.isArray(products) ? products.length : 0;\n  \n  // Get language\n  const language = item.json.language_detected || \"undetected\";\n  \n  // Build error details\n  let errorDetails = '';\n  \n  // If this is a partial success, mention that some products succeeded\n  if (partialSuccess && successCount > 0) {\n    errorDetails += `Partial Success: ${successCount} product(s) were successfully processed.\\n\\n`;\n  }\n  \n  // Add failed product details\n  if (failedCount > 0) {\n    errorDetails += `${failedCount} product(s) failed processing:\\n`;\n    \n    // List reasons for first few failures\n    const maxToList = Math.min(failedCount, 3);\n    for (let i = 0; i < maxToList; i++) {\n      const failedProduct = failedProducts[i];\n      \n      // Extract product name from various possible locations\n      let productName = \"Unknown product\";\n      if (failedProduct.extracted_values?.name) {\n        productName = failedProduct.extracted_values.name;\n      } else if (failedProduct.data?.field_extractions?.name?.value) {\n        productName = failedProduct.data.field_extractions.name.value;\n      } else if (failedProduct.data?.name?.value) {\n        productName = failedProduct.data.name.value;\n      }\n      \n      const productError = failedProduct.error || failedProduct.reason || \"Validation failed\";\n      const productConfidence = failedProduct.confidence ? ` (confidence: ${failedProduct.confidence.toFixed(2)})` : '';\n      \n      errorDetails += `• ${productName}: ${productError}${productConfidence}\\n`;\n    }\n    \n    if (failedCount > maxToList) {\n      errorDetails += `... and ${failedCount - maxToList} more\\n`;\n    }\n    \n    errorDetails += '\\n';\n  }\n  \n  // Add general error reason if no specific product failures\n  if (failedCount === 0 && !partialSuccess) {\n    errorDetails += `Error: ${errorReason}\\n`;\n  }\n  \n  // Load and populate the template\n  const templateVars = {\n    sender: sender,\n    errorReason: errorReason,\n    failedProductDetails: errorDetails,\n    language: language\n  };\n  \n  const emailContent = loadEmailTemplate('failure', templateVars);\n  \n  // Extract subject and body from template\n  const lines = emailContent.split('\\n');\n  const subject = lines[0].replace('Subject: ', '');\n  const body = lines.slice(2).join('\\n');\n  \n  return [\n    {\n      json: {\n        to: sender,\n        subject: subject,\n        body: body,\n        document_id: item.json.document_id,\n        _lifecycle_log: item.json._lifecycle_log || []\n      }\n    }\n  ];\n} catch (error) {\n  // Error handling\n  return [\n    {\n      json: {\n        to: \"materials-team@example.com\",\n        subject: \"Error Formatting Error Email\",\n        body: `There was an error creating the error email: ${error.message}`,\n        document_id: items[0]?.json?.document_id || \"unknown\",\n        _lifecycle_log: items[0]?.json?._lifecycle_log || []\n      }\n    }\n  ];\n}"
      },
      "id": "10",
      "name": "Error Notifier",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        150
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{ $env.EMAIL_USER }}",
        "toEmail": "={{ $json[\"to\"] }}",
        "subject": "={{ $json[\"subject\"] }}",
        "text": "={{ $json[\"body\"] }}",
        "options": {
          "attachments": "={{ $json[\"attachments\"] }}"
        }
      },
      "id": "11",
      "name": "Send Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1700,
        100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Log all document lifecycle stages to a file\n\nconst fs = require('fs');\nconst path = require('path');\n\ntry {\n  const logPath = '/home/node/data/logs';\n  const logFile = path.join(logPath, 'document_lifecycle.json');\n\n  // Ensure log directory exists\n  if (!fs.existsSync(logPath)) {\n    fs.mkdirSync(logPath, { recursive: true });\n  }\n\n  // Get existing logs or create new array\n  let logs = [];\n  if (fs.existsSync(logFile)) {\n    try {\n      const data = fs.readFileSync(logFile, 'utf8');\n      logs = JSON.parse(data);\n    } catch (err) {\n      console.error('Error reading logs file:', err);\n    }\n  }\n\n  // Add new log entries\n  if (items[0].json._lifecycle_log && Array.isArray(items[0].json._lifecycle_log)) {\n    logs = logs.concat(items[0].json._lifecycle_log);\n    \n    // Write updated logs\n    try {\n      fs.writeFileSync(logFile, JSON.stringify(logs, null, 2));\n    } catch (err) {\n      console.error('Error writing logs file:', err);\n    }\n  }\n\n  // Pass through the original items\n  return items;\n} catch (error) {\n  console.error('Error in Activity Logger:', error);\n  // Pass through the original items even if logging fails\n  return items;\n}"
      },
      "id": "12",
      "name": "Activity Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1900,
        100
      ]
    },
    {
      "parameters": {
        "dataPropertyName": "error",
        "errorMessage": "=Document Processor Error: {{ $json.error_message || 'Unknown error' }}"
      },
      "id": "14",
      "name": "Global Error Handler",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        100,
        250
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error_message",
              "value": "={{ $json.error || 'Unknown error' }}"
            },
            {
              "name": "document_id",
              "value": "={{ $json.document_id || 'unknown-doc' }}"
            },
            {
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "15",
      "name": "Error Formatter",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        300,
        250
      ]
    }
  ],
  "connections": {
    "Email Trigger": {
      "main": [
        [
          {
            "node": "Document Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Validator": {
      "main": [
        [
          {
            "node": "LLM Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Extraction": {
      "main": [
        [
          {
            "node": "LLM Data Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Data Processor": {
      "main": [
        [
          {
            "node": "LLM Verifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Verifier": {
      "main": [
        [
          {
            "node": "Validation Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Router": {
      "main": [
        [
          {
            "node": "Success Notifier",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Notifier": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notifier": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Activity Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global Error Handler": {
      "main": [
        [
          {
            "node": "Error Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Formatter": {
      "main": [
        [
          {
            "node": "Error Notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}