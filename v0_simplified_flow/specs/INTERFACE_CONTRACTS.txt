# Interface Contracts

This document defines the expected input/output data structures for each node in the Materials Intake V0 workflow.

## Email Trigger Node

**Type**: IMAP Email Trigger  
**Purpose**: Monitors inbox for new emails and extracts message data with attachments

### Output Structure

Each triggered execution produces an array with a single item containing the email data:

```javascript
[
  {
    "json": {
      "textPlain": "string",              // Plain text body of the email
      "textHtml": "string",               // HTML body of the email
      "subject": "string",                // Email subject line
      "date": "ISO 8601 timestamp",       // Message date (e.g., "2024-11-15T09:30:00.000Z")
      "to": {
        "value": [
          {
            "address": "string",          // Recipient email address
            "name": "string"              // Recipient display name
          }
        ],
        "html": "string",                 // HTML formatted recipient string
        "text": "string"                  // Plain text recipient string
      },
      "from": {
        "value": [
          {
            "address": "string",          // Sender email address
            "name": "string"              // Sender display name
          }
        ],
        "html": "string",                 // HTML formatted sender string
        "text": "string"                  // Plain text sender string
      },
      "messageId": "string",              // Unique message identifier
      "replyTo": {                        // Optional reply-to addresses
        "value": [...],                   // Same structure as to/from
        "html": "string",
        "text": "string"
      },
      "attachments": [                    // Array of attachment metadata
        {
          "filename": "string",           // Original filename
          "content": {                    // Buffer representation
            "type": "Buffer",
            "data": [...]                 // Raw byte array
          },
          "contentType": "string",        // MIME type (e.g., "application/pdf")
          "size": number                  // Size in bytes
        }
      ],
      "headers": {},                      // Raw email headers object
      "headerLines": [],                  // Header lines array
      "uid": number                       // IMAP unique identifier
    },
    "binary": {
      "attachment_0": {                   // Binary data for first attachment
        "data": "base64string",           // Base64 encoded file content
        "mimeType": "string",             // MIME type
        "fileName": "string",             // Original filename
        "fileExtension": "string"         // File extension without dot
      },
      "attachment_1": {...},              // Additional attachments follow same pattern
      // ... continues for each attachment
    }
  }
]
```

## Document Validator Node

**Type**: Code (JavaScript VM Sandbox)  
**Purpose**: Validates emails, extracts PDF attachments, and prepares metadata for LLM extraction

### Input Structure

Receives the Email Trigger output (see above).

### Output Structure

Produces an array with one item per PDF attachment:

```javascript
[
  {
    "json": {
      "sender": "string",                  // From email metadata
      "timestamp": "ISO 8601 timestamp",   // Processing timestamp
      "subject": "string",                 // Email subject
      "document_id": "string",             // Format: "doc-{timestamp}-{index}"
      "group_id": "string",                // Format: "email-{timestamp}"
      "attachment_key": "string",          // Binary object key (e.g., "attachment_0")
      "attachment_index": number,          // 0-based index
      "total_attachments": number,         // Total PDF count in email
      "task": "extract_metadata",          // Fixed value
      "document_type": "supplier_material", // Fixed value
      "_lifecycle_log": [                  // Audit trail
        {
          "group_id": "string",
          "document_count": number,
          "from_state": "RECEIVED",
          "to_state": "VALIDATED",
          "timestamp": "ISO 8601",
          "agent": "document_validator",
          "notes": "string"
        },
        {
          "document_id": "string",
          "group_id": "string",
          "attachment_index": number,
          "from_state": "VALIDATED",
          "to_state": "INTERPRETED",
          "timestamp": "ISO 8601",
          "agent": "document_validator",
          "notes": "string"
        }
      ]
    },
    "binary": {
      "attachment_0": {                   // Binary data passed through from Email Trigger
        "data": "base64string",           // Base64 encoded file content
        "mimeType": "string",             // MIME type
        "fileName": "string",             // Original filename
        "fileExtension": "string"         // File extension without dot
      }
    }
  }
]
```

## LLM Extraction Node

**Type**: Code (JavaScript VM Sandbox)  
**Purpose**: Uploads PDFs to Gemini API and extracts material metadata

### Input Structure

Receives Document Validator output (see above) including both json and binary data.

### Output Structure (Success)

```javascript
[
  {
    "json": {
      "products": [                        // Extracted products array
        {
          "field_extractions": {...},      // Product fields with confidence scores
          "average_confidence": number     // Average confidence across fields
        }
      ],
      "language_detected": "string",       // Detected document language
      "processing_summary": {...},          // LLM processing summary
      "verification_passed": boolean,       // true if products extracted
      "document_id": "string",
      "group_id": "string",
      "attachment_index": number,
      "total_attachments": number,
      "product_count": number,             // Number of products extracted
      "sender": "string",
      "subject": "string",
      "timestamp": "string",
      "retry_count": number,               // Retry attempt number (if retry)
      "uploaded_file_uri": "string",       // Gemini file URI
      "_lifecycle_log": [...],             // Extended audit trail
      "original_request": {...}            // Original request (if retry)
    }
  }
]
```

### Output Structure (Failure)

```javascript
[
  {
    "json": {
      "task_status": "failed",
      "error_summary": "string",           // Error description
      "document_id": "string",
      "group_id": "string",
      "verification_passed": false,
      "retry_count": number,               // Retry attempt number (if retry)
      "_lifecycle_log": [...]              // Extended audit trail with failure
    }
  }
]
```